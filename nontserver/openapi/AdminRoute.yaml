/admin/login:
  post:
    description: login for admin
    tags: 
      - Admin
    requestBody:
      require: true
      content: 
        application/json:
          schema: 
            $ref: "#/components/requestBodies/loginBody"
    responses:
      200:
        description: logged in
        content: 
          application/json:
            schema: 
              $ref: "#/components/respondBodies/loginBody/success"
      500:
        description: not logged in
        content: 
          application/json:
            schema: 
              $ref: "#/components/respondBodies/loginBody/error"

/admin/create:
  post: 
    description: create admin
    tags: 
      - Admin
    requestBody:
      require: true
      content:
        application/json:
          schema:
            $ref: "#/components/requestBodies/addAdminBody"
    responses:
      200:
        description: create admin successfully
        content: 
          application/json:
            schema:
                $ref: "#/components/respondBodies/createAdminBody"
      500:
        description: can't create admin, see error message.
        content: 
          application/json:
           schema:
              type: object
              properties:
                err: 
                  type: string

components:
  requestBodies:
    loginBody:
      type: object
      required:
        - emai≈õ
        - password
      properties:
        email:
          type: string
        password:
          type: string
    addAdminBody: 
      type: object
      required: 
        - email
        - password
        - userType
        - secret
      properties:
        email: 
          description: the email of admin
          type: string
        password:
          description: the password of admin
          type: string
        userType:
          description: the user type ("admin" only)
          type: string
        secret: 
          description: the secret got from database admin.
          type: string
    
  respondBodies:
    loginBody: 
      success:
        type: object
        properties:
          login: 
            type: boolean
            description: the boolean specifying the result of logging in
          token: 
            type: string
            description: the JWT token which will be used to authenticate the user
          email: 
            type: string
            description: the email of the user
          userType: 
            type: string
            description: the type of the user
          name: 
            type: string
            description: the name of the user
      error:
        type: object
        properties:
          login:
            type: boolean
            description: the boolean specifying the result of logging in
          error: 
            type: string
            description: the error message from the server side.
    createAdminBody: 
        type: object
        properties:
          email:
            type: string
            description: the email of the created admin
          password:
            type: string
            description: the hashed password of the created admin
          userType:
            type: string 
            description: the user type of the admin ("admin")